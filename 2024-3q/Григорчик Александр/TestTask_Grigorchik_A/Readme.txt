Используемая версия Java: 
java 17.0.10 2024-01-16 LTS

Система сборки:
Maven, version 3.9.6

Зависимости
В данном проекте не используются сторонние библиотеки, только стандартная библиотека Java. 
Однако, если в будущем планируется добавление зависимостей, это можно сделать через Maven, добавив необходимые библиотеки в файл pom.xml.

Инструкция по сборке и запуску проекта:
1. Разархивируйте архив Sort.

1. Откройте командную строку или PowerShell, перейдите в корневую папку распакованного проекта и введите команду: 
	mvn -version

2. Если Maven установлен, вы увидите информацию о версии Maven и можете перейти к 6 пункту. Если вы видите ошибку, 
устанавливаем с сайта https://maven.apache.org/download.cgi последнюю версию.

3. Распакуйте архив в директорию на вашем компьютере, например C:\Program Files\Maven

4. Добавьте Maven в переменную окружения PATH
	-Откройте "Панель управления" -> "Система" -> "Дополнительные параметры системы".
	-Вкладка "Дополнительно" -> "Переменные среды".
	-В разделе "Системные переменные" найдите переменную Path и выберите "Изменить".
	-Добавьте путь к папке bin в директории, где установлен Maven, например C:\Program Files\Maven\bin

5. Перезапустите PowerShell или командную строку и повторите команду ->
	mvn -version

6. Далее, для сборки проекта переходим при помощи команды cd в корень проекта и пишем команду "mvn clean install"
	Пример:
		cd D:\"Java"\"MyProject"\"Sort"
		mvn clean install

7. Для запуска утилиты переходим в -> D:\Java\MyProject\Sort\target
	cd D:\"Java"\"MyProject"\"Sort"\"target"

8. Командой ls можно проверить список файлов, находящихся в данной директории. 
	Пример:
		PS D:\"Java"\"MyProject"\"Sort"\"target" ls
	
   Каталог: D:\Java\MyProject\Sort\target

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----          9/4/2024   5:14 PM                classes
d-----          9/4/2024   5:14 PM                generated-sources
d-----          9/4/2024   5:14 PM                generated-test-sources
d-----          9/4/2024   5:14 PM                maven-archiver
d-----          9/4/2024   5:14 PM                maven-status
d-----          9/4/2024   5:14 PM                test-classes
-a----          9/4/2024   5:14 PM           9459 Sort-1.0-SNAPSHOT.jar

9. Для запуска утилиты нужно написать команду 
	java -jar Sort-1.0-SNAPSHOT.jar

10. Опции для работы с утилитой
	-o 	--- 	Задает путь для сохранения результатов выполнения.
	-p	---	Задает префикс имен файлов с резултатом.
	-a	---	Данная опция нужна для записи резултатов в те же файлы, без перезаписи
	-s	---	Опция для вывода краткой статистики уникальных элементов
	-f	---	Опция для вывода полной статистики уникальных элементов
----------------------------------------------------------------------------------------------
Добавлены две новые опции, по скольку не совсем понятно, как правильно нужно собирать статистику.
"Краткая статистика содержит только количество элементов записанных в исходящие файлы"
	-sf	---	Собирает краткую статистику всех элементов(строк), которые добавлены в исходящие файлы
	-ff	---	Собирает полную статистику всех элементов(строк), которые добавлены в исходящие файлы
----------------------------------------------------------------------------------------------

Пример:
	java -jar Sort-1.0-SNAPSHOT.jar D:\Java\MyProject\Sort\test1.txt D:\Java\MyProject\Sort\test2.txt -p test_ -o D:\Java -a -s

Вывод:

----------------Options----------------
Prefix: test_
OutputPath: D:\Java
AddMode: true
ShortStatisticsElements: true
InputFiles: [D:\Java\MyProject\Sort\test1.txt, D:\Java\MyProject\Sort\test2.txt]
----------------Output------------------
File already exists: D:\Java\test_integers.txt
The list is empty, the file was not created: D:\Java\test_floats.txt
File already exists: D:\Java\test_strings.txt
------------Short statistics------------
unique elements = 4
----------------------------------------

		!!!Важно!!!
Если вы не хотите задавать полный путь для файлов, которые будет обрабатывать утилита, вам нужно создать/перенести эти файлы в директорию
исполняемого файла (прим: D:\"Java"\"MyProject"\"Sort"\"target").

	PS D:\Java\MyProject\Sort\target> java -jar Sort-1.0-SNAPSHOT.jar test1.txt test2.txt -p test_ -o D:\Java -a -s


__________________________________________________________________________________________________________________________________________
***********************************************Вариант для сборки в IDE (прим. IntelliJ IDEA).********************************************
__________________________________________________________________________________________________________________________________________

1. Откройте IntelliJ IDEA.

2. Выберите File > Open... и укажите путь к директории проекта. Нажмите OK.  (прим. D:\Java\MyProject\Sort)

3. Перейдите в меню File > Project Structure...

4. В левом меню выберите Artifacts.

5. Нажмите на кнопку + и выберите JAR > From modules with dependencies...

6. В открывшемся окне выберите ваш основной класс (например, org.example.FilterApp) и нажмите OK.

7. Для сборки .jar файла перейдите в меню Build > Build Artifacts....

8. В открывшемся окне выберите ваш артефакт и нажмите Build (Sort_jar:jar). После завершения сборки, файл JAR будет доступен по пути out/artifacts/Sort_jar/Sort.jar.

9. Для запуска утилиты откройте командную строку и перейдите в -> 
	cd D:\"Java"\"MyProject"\"Sort"\"out"\"artifacts"\"Sort_jar"

10. Для запуска утилиты нужно написать команду 
	java -jar Sort.jar

11. Опции для работы с утилитой
	-o 	--- 	Задает путь для сохранения результатов выполнения.
	-p	---	Задает префикс имен файлов с резултатом.
	-a	---	Данная опция нужна для записи резултатов в те же файлы, без перезаписи
	-s	---	Опция для вывода краткой статистики уникальных элементов
	-f	---	Опция для вывода полной статистики уникальных элементов
----------------------------------------------------------------------------------------------
Добавлены две новые опции, по скольку не совсем понятно, как правильно нужно собирать статистику.
"Краткая статистика содержит только количество элементов записанных в исходящие файлы"
	-sf	---	Собирает краткую статистику всех элементов(строк), которые добавлены в исходящие файлы
	-ff	---	Собирает полную статистику всех элементов(строк), которые добавлены в исходящие файлы
----------------------------------------------------------------------------------------------

Пример:
	java -jar Sort.jar D:\Java\MyProject\Sort\test1.txt D:\Java\MyProject\Sort\test2.txt -p test_ -o D:\Java -a -s

Вывод:

----------------Options----------------
Prefix: test_
OutputPath: D:\Java
AddMode: true
ShortStatisticsElements: true
InputFiles: [D:\Java\MyProject\Sort\test1.txt, D:\Java\MyProject\Sort\test2.txt]
----------------Output------------------
File already exists: D:\Java\test_integers.txt
The list is empty, the file was not created: D:\Java\test_floats.txt
File already exists: D:\Java\test_strings.txt
------------Short statistics------------
unique elements = 4
----------------------------------------

		!!!Важно!!!
Если вы не хотите задавать полный путь для файлов, которые будет обрабатывать утилита, вам нужно создать/перенести эти файлы в директорию
исполняемого файла (прим: D:\"Java"\"MyProject"\"Sort"\"out"\"artifacts"\"Sort_jar").

	PS D:\Java\MyProject\Sort\out\artifacts\Sort_jar> java -jar Sort.jar test1.txt test2.txt -p test_ -o D:\Java -a -s



	


















